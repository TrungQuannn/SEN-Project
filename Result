package a1_2201140072;

import java.util.List;

public class Result implements Comparable<Result> {
    private Doc dcmt;
    private List<Match> matches;
    public Result (Doc d, List<Match> matches){
  this.dcmt = d;
  this.matches= matches;
    }
    public Doc getDoc(){
        return dcmt;
    }
    public List<Match> getMatches(){
        return matches;
    }
    public int getTotalFrequency(){
        int totalFreq = 0;
        for(Match m : matches){
            totalFreq = totalFreq + m.getFreq();
        }
        return totalFreq;
    }
    public double getAverageFirstIndex(){
        if (matches.isEmpty()){
            return 0;
        }
        //neu khong empty
        int ave= 0;
        for(Match ma: matches){
            ave = ave + ma.getFirstIndex();
        }
        return (double) ave / matches.size();
    }


    private boolean isMatchedWord(Word w) {
        for (Match m : matches) {
            if (m.getWord().equals(w)) {
                return true;
            }
        }
        return false;
    }

    public String htmlHighlight() {
        StringBuilder sb = new StringBuilder();
        int countBody = 0;
        sb.append("<h3>");
        // Highlight title
        for (Word w : dcmt.getTitle()) {
            if (isMatchedWord(w)) {

                sb.append(w.getPrefix())
                        .append("<u>").append(w.getText()).append("</u>")
                        .append(w.getSuffix());


            } else {
                sb.append(w.getPrefix());
                sb.append(w.getText());
                sb.append(w.getSuffix());
            } if(countBody < dcmt.getTitle().size()-1) {
            sb.append(" ");
            }
            countBody++;
        }
        sb.append("</h3>");
                // Highlight body
        sb.append("<p>");
        countBody =0;
        for (Word w : dcmt.getBody()) {
            if (isMatchedWord(w)) {
                    sb.append(w.getPrefix())
                            .append("<b>").append(w.getText()).append("</b>")
                            .append(w.getSuffix());


            } else {
                sb.append(w.getPrefix());
                sb.append(w.getText());
                sb.append(w.getSuffix());
            }
            if(countBody < dcmt.getBody().size()-1){
                sb.append(" ");
            }
            countBody+=1;

        }
        sb.append("</p>");


        return sb.toString().replaceAll("[\r\n]", "");
    }



    public int compareTo(Result o){
//        A has greater match count than B = so sanh matches.size()
        if(this.matches.size() != o.matches.size()){
            return Integer.compare(o.matches.size(), this.matches.size());
        }
//        A has greater total frequency than B = so sanh getTotalFrequency()
        if(this.getTotalFrequency() != o.getTotalFrequency()){
            return Integer.compare(o.getTotalFrequency(), this.getTotalFrequency());
        }
//        A has lower average first index than B
        if(this.getAverageFirstIndex() != o.getAverageFirstIndex()){
            return Double.compare(this.getAverageFirstIndex(), o.getAverageFirstIndex());
        }
        return 0;
    }
}
